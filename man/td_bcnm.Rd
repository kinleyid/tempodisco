% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/td_bcnm.R
\name{td_bcnm}
\alias{td_bcnm}
\title{Temporal discounting binary choice nonlinear model}
\usage{
td_bcnm(
  data,
  discount_function = "all",
  choice_rule = c("logistic", "probit", "power"),
  fixed_ends = F,
  fit_err_rate = F,
  gamma_par_starts = c(0.01, 1, 100),
  eps_par_starts = c(0.01, 0.25),
  silent = T,
  optim_args = list(),
  ...
)
}
\arguments{
\item{data}{A data frame with columns \code{val_imm} and \code{val_del} for the values of the immediate and delayed rewards, \code{del} for the delay, and \code{imm_chosen} (Boolean) for whether the immediate reward was chosen. Other columns can also be present but will be ignored.}

\item{discount_function}{A string specifying the name of the discount functions to use, or an object of class \code{td_fn} (used for creating custom discount functions), or a list of objects of class \code{td_fn}.}

\item{choice_rule}{A string specifying whether the \code{'logistic'} (default), \code{'probit'}, or \code{'power'} choice rule should be used.}

\item{fixed_ends}{A Boolean (false by default) specifying whether the model should satisfy the desiderata that subjects should always prefer something over nothing (i.e., nonzero delayed reward over nothing) and the same reward sooner rather than later.}

\item{fit_err_rate}{A Boolean (false by default) specifying whether the model should include an error rate (parameterized by "eps"). See Eq. 5 here: https://doi.org/10.3758/s13428-015-0672-2.}

\item{gamma_par_starts}{A vector of starting values to try for the "gamma" parameter (which controls the steepness of the choice rule) during optimization.}

\item{eps_par_starts}{A vector of starting values to try for the "eps" parameter (which controls the error rate) during optimization. Ignored if `fit_err_rate = FALSE`.}

\item{silent}{Boolean (true by default). The call to \code{optim()} occurs within a \code{try()} wrapper. The value of \code{silent} is passed along to \code{try()}.}

\item{optim_args}{Additional arguments to pass to \code{optim()}. Default is \code{list(silent = T)}.}

\item{...}{Additional arguments to provide finer-grained control over the model configuration.}
}
\value{
An object of class \code{td_bcnm} with components \code{data} (containing the data used for fitting), \code{config} (containing the internal configuration of the model, including the \code{discount_function}), and \code{optim} (the output of \code{optim()}).
}
\description{
Compute a binary choice model for a single subject
}
\examples{
\dontrun{
data("td_bc_single_ptpt")
mod <- td_bcnm(td_bc_single_ptpt, discount_function = "hyperbolic", fixed_ends = T)
# Custom discount function
custom_discount_function <- td_fn(
  name = 'custom',
  fn = function(data, p) (1 - p['b'])*exp(-p['k']*data$del) + p['b'],
  par_starts = list(k = c(0.001, 0.1), b = c(0.001, 0.1)),
  par_lims = list(k = c(0, Inf), b = c(0, 1)),
  ED50 = function(...) 'non-analytic'
)
mod <- td_bcnm(td_bc_single_ptpt, discount_function = custom_discount_function, fit_err_rate = T)
}
}
\seealso{
Other nonlinear binary choice model functions: 
\code{\link{coef.td_bcnm}()},
\code{\link{deviance.td_bcnm}()},
\code{\link{fitted.td_bcnm}()},
\code{\link{logLik.td_bcnm}()},
\code{\link{predict.td_bcnm}()},
\code{\link{residuals.td_bcnm}()}
}
\concept{nonlinear binary choice model functions}
